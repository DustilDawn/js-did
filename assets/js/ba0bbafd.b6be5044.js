"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3],{4852:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var r=n(9231);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):d(d({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},k=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),k=c(n),m=o,f=k["".concat(s,".").concat(m)]||k[m]||p[m]||i;return n?r.createElement(f,d(d({ref:t},l),{},{components:n})):r.createElement(f,d({ref:t},l))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,d=new Array(i);d[0]=k;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a.mdxType="string"==typeof e?e:o,d[1]=a;for(var c=2;c<i;c++)d[c]=n[c];return r.createElement.apply(null,d)}return r.createElement.apply(null,n)}k.displayName="MDXCreateElement"},1600:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>d,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var r=n(7626),o=(n(9231),n(4852));const i={id:"key_did_resolver",title:"Module: key-did-resolver",custom_edit_url:null},d=void 0,a={unversionedId:"api/modules/key_did_resolver",id:"api/modules/key_did_resolver",title:"Module: key-did-resolver",description:"Installation",source:"@site/docs/api/modules/key_did_resolver.md",sourceDirName:"api/modules",slug:"/api/modules/key_did_resolver",permalink:"/docs/api/modules/key_did_resolver",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"key_did_resolver",title:"Module: key-did-resolver",custom_edit_url:null},sidebar:"api",previous:{title:"Module: key-did-provider-ed25519",permalink:"/docs/api/modules/key_did_provider_ed25519"},next:{title:"Module: pkh-did-resolver",permalink:"/docs/api/modules/pkh_did_resolver"}},s={},c=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:3},{value:"Code",id:"code",level:3},{value:"Output",id:"output",level:3},{value:"code snippet for ed25519",id:"code-snippet-for-ed25519",level:4},{value:"code snippet for P-256",id:"code-snippet-for-p-256",level:4},{value:"code snippet for P-384",id:"code-snippet-for-p-384",level:4},{value:"code snippet for P-521",id:"code-snippet-for-p-521",level:4},{value:"did document verificationMethod for ed25519:",id:"did-document-verificationmethod-for-ed25519",level:4},{value:"did document verificationMethod for P-256:",id:"did-document-verificationmethod-for-p-256",level:4},{value:"did document verificationMethod for P-384:",id:"did-document-verificationmethod-for-p-384",level:4},{value:"did document verificationMethod for P-521:",id:"did-document-verificationmethod-for-p-521",level:4},{value:"Testing",id:"testing",level:3},{value:"References",id:"references",level:3},{value:"Variables",id:"variables",level:2},{value:"default",id:"default",level:3},{value:"Type declaration",id:"type-declaration",level:4},{value:"Functions",id:"functions",level:2},{value:"getResolver",id:"getresolver",level:3},{value:"Returns",id:"returns",level:4}],l={toc:c};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ npm install key-did-resolver\n")),(0,o.kt)("h3",{id:"usage"},"Usage"),(0,o.kt)("p",null,"This code includes support for the curves Ed25519, Secp256k1, Secp256r1 (P-256), Secp384r1 (P-384), and Secp521r1 (P-521) which follow the test vectors at:\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/w3c-ccg/did-method-key/tree/main/test-vectors"},"https://github.com/w3c-ccg/did-method-key/tree/main/test-vectors")),(0,o.kt)("p",null,"This code has been tested with the following ",(0,o.kt)("inlineCode",{parentName:"p"},"did:key"),(0,o.kt)("sup",{parentName:"p",id:"fnref-1"},(0,o.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1"))," providers:\n|  Curve              | Repositry                                                      |\n| ------------------- | -------------------------------------------------------------- |\n| Ed25519             | ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ceramicnetwork/key-did-provider-ed25519"},"https://github.com/ceramicnetwork/key-did-provider-ed25519"),"     |\n| Secp256k1           | ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ceramicnetwork/key-did-provider-secp256k1"},"https://github.com/ceramicnetwork/key-did-provider-secp256k1"),"   |\n| P-256, P-384, P-521 | ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/bshambaugh/did-key-creator"},"https://github.com/bshambaugh/did-key-creator"),"                  |"),(0,o.kt)("p",null,"Compressed",(0,o.kt)("sup",{parentName:"p",id:"fnref-2"},(0,o.kt)("a",{parentName:"sup",href:"#fn-2",className:"footnote-ref"},"2"))," forms of P-256, P-384, and P-521 are preferred. ",(0,o.kt)("sup",{parentName:"p",id:"fnref-3"},(0,o.kt)("a",{parentName:"sup",href:"#fn-3",className:"footnote-ref"},"3"))),(0,o.kt)("h3",{id:"code"},"Code"),(0,o.kt)("p",null,"Using ",(0,o.kt)("a",{parentName:"p",href:"https://developers.ceramic.network/reference/typescript/modules/_ceramicnetwork_core.html"},"@ceramicnetwork/core")," with secp256k1 did-key:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"import KeyDIDResolver from 'key-did-resolver'\nimport {Resolver} from 'did-resolver'\nimport {Ceramic} from '@ceramicnetwork/core'\nimport * as IPFS from 'ipfs-core'\nimport dagJose from 'dag-jose'\nimport {convert} from 'blockcodec-to-ipld-format'\n\nconst ipfs = await IPFS.create({\n    ipld: { formats: [dagJose] },\n})\n\nconst config = {}\nconst ceramic = await Ceramic.create(ipfs, config)\nconst keyDidResolver = KeyDIDResolver.getResolver(ceramic)\nconsole.log(keyDidResolver)\nconst didResolver = new Resolver(keyDidResolver)\nconst doc = await didResolver.resolve('did:key:z6MktvqCyLxTsXUH1tUZncNdVeEZ7hNh7npPRbUU27GTrYb8')\n\nconsole.log(doc)\nconsole.log(doc.didDocument.verificationMethod)\n")),(0,o.kt)("p",null,"Using ",(0,o.kt)("a",{parentName:"p",href:"https://developers.ceramic.network/reference/typescript/modules/_ceramicnetwork_http_client.html"},"@ceramicnetwork/http-client")," with secp256k1 did-key:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"// Usage from cloned GitHub Repository:\n// import * as keyDIDResolver from '../js-ceramic/packages/key-did-resolver/lib/index.js';\nimport KeyDIDResolver from 'key-did-resolver'\nimport {Resolver} from 'did-resolver'\n\nimport { CeramicClient } from '@ceramicnetwork/http-client'\nconst API_URL = \"https://ceramic-clay.3boxlabs.com\" // or your ceramic endpoint\nconst ceramic = new CeramicClient(API_URL)\n\nconst keyDidResolver = KeyDIDResolver.getResolver(ceramic)\nconst didResolver = new Resolver(keyDidResolver)\nconst doc = await didResolver.resolve('did:key:zQ3shokFTS3brHcDQrn82RUDfCZESWL1ZdCEJwekUDPQiYBme')\n\nconsole.log(doc)\nconsole.log(doc.didDocument.verificationMethod)\n")),(0,o.kt)("h3",{id:"output"},"Output"),(0,o.kt)("p",null,"Using ",(0,o.kt)("a",{parentName:"p",href:"https://developers.ceramic.network/reference/typescript/modules/_ceramicnetwork_core.html"},"@ceramicnetwork/core")," with secp256k1 did-key:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"{\n  didResolutionMetadata: { contentType: 'application/did+json' },\n  didDocument: {\n    id: 'did:key:zQ3shokFTS3brHcDQrn82RUDfCZESWL1ZdCEJwekUDPQiYBme',\n    verificationMethod: [ [Object] ],\n    authentication: [\n      'did:key:zQ3shokFTS3brHcDQrn82RUDfCZESWL1ZdCEJwekUDPQiYBme#zQ3shokFTS3brHcDQrn82RUDfCZESWL1ZdCEJwekUDPQiYBme'\n    ],\n    assertionMethod: [\n      'did:key:zQ3shokFTS3brHcDQrn82RUDfCZESWL1ZdCEJwekUDPQiYBme#zQ3shokFTS3brHcDQrn82RUDfCZESWL1ZdCEJwekUDPQiYBme'\n    ],\n    capabilityDelegation: [\n      'did:key:zQ3shokFTS3brHcDQrn82RUDfCZESWL1ZdCEJwekUDPQiYBme#zQ3shokFTS3brHcDQrn82RUDfCZESWL1ZdCEJwekUDPQiYBme'\n    ],\n    capabilityInvocation: [\n      'did:key:zQ3shokFTS3brHcDQrn82RUDfCZESWL1ZdCEJwekUDPQiYBme#zQ3shokFTS3brHcDQrn82RUDfCZESWL1ZdCEJwekUDPQiYBme'\n    ]\n  },\n  didDocumentMetadata: {}\n}\n[\n  {\n    id: 'did:key:zQ3shokFTS3brHcDQrn82RUDfCZESWL1ZdCEJwekUDPQiYBme#zQ3shokFTS3brHcDQrn82RUDfCZESWL1ZdCEJwekUDPQiYBme',\n    type: 'Secp256k1VerificationKey2018',\n    controller: 'did:key:zQ3shokFTS3brHcDQrn82RUDfCZESWL1ZdCEJwekUDPQiYBme',\n    publicKeyBase58: '23o6Sau8NxxzXcgSc3PLcNxrzrZpbLeBn1izfv3jbKhuv'\n  }\n]\n\n")),(0,o.kt)("p",null,"Using ",(0,o.kt)("a",{parentName:"p",href:"https://developers.ceramic.network/reference/typescript/modules/_ceramicnetwork_http_client.html"},"@ceramicnetwork/http-client")," with secp256k1 did-key:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Swarm listening on /ip4/127.0.0.1/tcp/4011/p2p/QmYGmd8VoQ1sZ82diHEzhbPxfrjrxryLMnJem4UaNnEf8K\nSwarm listening on /ip4/10.0.0.5/tcp/4011/p2p/QmYGmd8VoQ1sZ82diHEzhbPxfrjrxryLMnJem4UaNnEf8K\nSwarm listening on /ip4/127.0.0.1/tcp/4012/ws/p2p/QmYGmd8VoQ1sZ82diHEzhbPxfrjrxryLMnJem4UaNnEf8K\nSwarm listening on /ip4/10.0.0.5/tcp/4012/ws/p2p/QmYGmd8VoQ1sZ82diHEzhbPxfrjrxryLMnJem4UaNnEf8K\nConnecting to ceramic network 'inmemory' using pubsub topic '/ceramic/inmemory-2974851949'\nPeer discovery is not supported for ceramic network: inmemory. This node may fail to load documents from other nodes on the network.\nThis node with peerId QmYGmd8VoQ1sZ82diHEzhbPxfrjrxryLMnJem4UaNnEf8K is not included in the peer list for Ceramic network inmemory. It will not be discoverable by other nodes in the network, and so data created against this node will not be available to the rest of the network.\nConnected to anchor service '<inmemory>' with supported anchor chains ['inmemory:12345']\n{ key: [AsyncFunction: key] }\n{\n  didResolutionMetadata: { contentType: 'application/did+json' },\n  didDocument: {\n    id: 'did:key:zQ3shokFTS3brHcDQrn82RUDfCZESWL1ZdCEJwekUDPQiYBme',\n    verificationMethod: [ [Object] ],\n    authentication: [\n      'did:key:zQ3shokFTS3brHcDQrn82RUDfCZESWL1ZdCEJwekUDPQiYBme#zQ3shokFTS3brHcDQrn82RUDfCZESWL1ZdCEJwekUDPQiYBme'\n    ],\n    assertionMethod: [\n      'did:key:zQ3shokFTS3brHcDQrn82RUDfCZESWL1ZdCEJwekUDPQiYBme#zQ3shokFTS3brHcDQrn82RUDfCZESWL1ZdCEJwekUDPQiYBme'\n    ],\n    capabilityDelegation: [\n      'did:key:zQ3shokFTS3brHcDQrn82RUDfCZESWL1ZdCEJwekUDPQiYBme#zQ3shokFTS3brHcDQrn82RUDfCZESWL1ZdCEJwekUDPQiYBme'\n    ],\n    capabilityInvocation: [\n      'did:key:zQ3shokFTS3brHcDQrn82RUDfCZESWL1ZdCEJwekUDPQiYBme#zQ3shokFTS3brHcDQrn82RUDfCZESWL1ZdCEJwekUDPQiYBme'\n    ]\n  },\n  didDocumentMetadata: {}\n}\n[\n  {\n    id: 'did:key:zQ3shokFTS3brHcDQrn82RUDfCZESWL1ZdCEJwekUDPQiYBme#zQ3shokFTS3brHcDQrn82RUDfCZESWL1ZdCEJwekUDPQiYBme',\n    type: 'Secp256k1VerificationKey2018',\n    controller: 'did:key:zQ3shokFTS3brHcDQrn82RUDfCZESWL1ZdCEJwekUDPQiYBme',\n    publicKeyBase58: '23o6Sau8NxxzXcgSc3PLcNxrzrZpbLeBn1izfv3jbKhuv'\n  }\n]\n\n")),(0,o.kt)("p",null,"The code for other curves is similar. Changing the did:key string is sufficient."),(0,o.kt)("h4",{id:"code-snippet-for-ed25519"},"code snippet for ed25519"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"const doc = await didResolver.resolve('did:key:z6MktvqCyLxTsXUH1tUZncNdVeEZ7hNh7npPRbUU27GTrYb8')\n")),(0,o.kt)("h4",{id:"code-snippet-for-p-256"},"code snippet for P-256"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"const doc = await didResolver.resolve('did:key:zDnaeUKTWUXc1HDpGfKbEK31nKLN19yX5aunFd7VK1CUMeyJu')\n")),(0,o.kt)("h4",{id:"code-snippet-for-p-384"},"code snippet for P-384"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"const doc = await didResolver.resolve('did:key:z82LkvCwHNreneWpsgPEbV3gu1C6NFJEBg4srfJ5gdxEsMGRJUz2sG9FE42shbn2xkZJh54')\n")),(0,o.kt)("h4",{id:"code-snippet-for-p-521"},"code snippet for P-521"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"const doc = await didResolver.resolve('did:key:z2J9gcGhudjgwsDLv4qJVM6DysnsjWRS6ggtCsSYpV9TGxd9WGoE1EkPxdvPcqEs7eLsQA985AGXPuqttPP7WJ5Qdiz27U3t')\n")),(0,o.kt)("p",null,"Note: All P-*** curves are compressed"),(0,o.kt)("p",null,"The verification method results are slightly different. Here is a sampling:"),(0,o.kt)("h4",{id:"did-document-verificationmethod-for-ed25519"},"did document verificationMethod for ed25519:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"[\n  {\n    id: 'did:key:z6MktvqCyLxTsXUH1tUZncNdVeEZ7hNh7npPRbUU27GTrYb8#z6MktvqCyLxTsXUH1tUZncNdVeEZ7hNh7npPRbUU27GTrYb8',\n    type: 'Ed25519VerificationKey2018',\n    controller: 'did:key:z6MktvqCyLxTsXUH1tUZncNdVeEZ7hNh7npPRbUU27GTrYb8',\n    publicKeyBase58: 'FUaAP6i2XyyouPds73QneYgZJ86qhua2jaZYBqJSwKok'\n  }\n]\n")),(0,o.kt)("h4",{id:"did-document-verificationmethod-for-p-256"},"did document verificationMethod for P-256:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"[\n  {\n    id: 'did:key:zDnaeUKTWUXc1HDpGfKbEK31nKLN19yX5aunFd7VK1CUMeyJu#zDnaeUKTWUXc1HDpGfKbEK31nKLN19yX5aunFd7VK1CUMeyJu',\n    type: 'JsonWebKey2020',\n    controller: 'did:key:zDnaeUKTWUXc1HDpGfKbEK31nKLN19yX5aunFd7VK1CUMeyJu',\n    publicKeyJwk: {\n      kty: 'EC',\n      crv: 'P-256',\n      x: 'OcPddBMXKURtwbPaZ9SfwEb8vwcvzFufpRwFuXQwf5Y',\n      y: 'nEA7FjXwRJ8CvUInUeMxIaRDTxUvKysqP2dSGcXZJfY'\n    }\n  }\n]\n")),(0,o.kt)("h4",{id:"did-document-verificationmethod-for-p-384"},"did document verificationMethod for P-384:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"[\n  {\n    id: 'did:key:z82LkvCwHNreneWpsgPEbV3gu1C6NFJEBg4srfJ5gdxEsMGRJUz2sG9FE42shbn2xkZJh54#z82LkvCwHNreneWpsgPEbV3gu1C6NFJEBg4srfJ5gdxEsMGRJUz2sG9FE42shbn2xkZJh54',\n    type: 'JsonWebKey2020',\n    controller: 'did:key:z82LkvCwHNreneWpsgPEbV3gu1C6NFJEBg4srfJ5gdxEsMGRJUz2sG9FE42shbn2xkZJh54',\n    publicKeyJwk: {\n      kty: 'EC',\n      crv: 'P-384',\n      x: 'CA-iNoHDg1lL8pvX3d1uvExzVfCz7Rn6tW781Ub8K5MrDf2IMPyL0RTDiaLHC1JT',\n      y: 'Kpnrn8DkXUD3ge4mFxi-DKr0DYO2KuJdwNBrhzLRtfMa3WFMZBiPKUPfJj8dYNl_'\n    }\n  }\n]\n")),(0,o.kt)("h4",{id:"did-document-verificationmethod-for-p-521"},"did document verificationMethod for P-521:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"[\n  {\n    id: 'did:key:z2J9gcGhudjgwsDLv4qJVM6DysnsjWRS6ggtCsSYpV9TGxd9WGoE1EkPxdvPcqEs7eLsQA985AGXPuqttPP7WJ5Qdiz27U3t#z2J9gcGhudjgwsDLv4qJVM6DysnsjWRS6ggtCsSYpV9TGxd9WGoE1EkPxdvPcqEs7eLsQA985AGXPuqttPP7WJ5Qdiz27U3t',\n    type: 'JsonWebKey2020',\n    controller: 'did:key:z2J9gcGhudjgwsDLv4qJVM6DysnsjWRS6ggtCsSYpV9TGxd9WGoE1EkPxdvPcqEs7eLsQA985AGXPuqttPP7WJ5Qdiz27U3t',\n    publicKeyJwk: {\n      kty: 'EC',\n      crv: 'P-521',\n      x: 'ATkofCC8_KAAJ3XSRayyPk8WqF9qahhoQVjbHtzbe5MSaaFiMKBZr-CurF9IcpJD-YYEukPmarSKFpXLtwAdiONT',\n      y: 'AWuYkJ7iaFhfz_dzFemaBnuq1WFnoZeIha7KpE9benPTX9FQhAoyHY-2qO4IyqGe1XGGtx8eJXvp57xMtUXm2rAH'\n    }\n }\n]\n")),(0,o.kt)("h3",{id:"testing"},"Testing"),(0,o.kt)("p",null,"Due to problems with parsing JSON with BigInt, tests need to be run with Jest in Serial mode. Use ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"npm run test -- --runInBand"))," ."),(0,o.kt)("h3",{id:"references"},"References"),(0,o.kt)("p",null,"[Standards for Efficient Cryptography\nSEC 2: Recommended Elliptic Curve Domain Parameters\nCerticom Research\nContact: Daniel R. L. Brown (dbrown@certicom.com)\nJanuary 27, 2010\nVersion 2.0 ]",", ",(0,o.kt)("a",{parentName:"p",href:"http://www.secg.org/sec2-v2.pdf"},"http://www.secg.org/sec2-v2.pdf")),(0,o.kt)("p",null,"[FIPS PUB 186-4 ,FEDERAL INFORMATION PROCESSING STANDARDS\nPUBLICATION, Digital Signature Standard (DSS)]",", ",(0,o.kt)("a",{parentName:"p",href:"https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf"},"https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf")),(0,o.kt)("p",null,"[Compact representation of an elliptic curve point, Network Working Group, A.J. Jivsov, March 15, 2014]",",\n",(0,o.kt)("a",{parentName:"p",href:"https://tools.ietf.org/id/draft-jivsov-ecc-compact-05.html"},"https://tools.ietf.org/id/draft-jivsov-ecc-compact-05.html")),(0,o.kt)("h2",{id:"variables"},"Variables"),(0,o.kt)("h3",{id:"default"},"default"),(0,o.kt)("p",null,"\u2022 ",(0,o.kt)("strong",{parentName:"p"},"default"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"Object")),(0,o.kt)("h4",{id:"type-declaration"},"Type declaration"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"getResolver")),(0,o.kt)("td",{parentName:"tr",align:"left"},"() => ",(0,o.kt)("inlineCode",{parentName:"td"},"ResolverRegistry"))))),(0,o.kt)("h2",{id:"functions"},"Functions"),(0,o.kt)("h3",{id:"getresolver"},"getResolver"),(0,o.kt)("p",null,"\u25b8 ",(0,o.kt)("strong",{parentName:"p"},"getResolver"),"(): ",(0,o.kt)("inlineCode",{parentName:"p"},"ResolverRegistry")),(0,o.kt)("h4",{id:"returns"},"Returns"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"ResolverRegistry")),(0,o.kt)("div",{className:"footnotes"},(0,o.kt)("hr",{parentName:"div"}),(0,o.kt)("ol",{parentName:"div"},(0,o.kt)("li",{parentName:"ol",id:"fn-1"},"The syntax of a did:key is ",(0,o.kt)("inlineCode",{parentName:"li"},"did:key:id"),". The did:key ",(0,o.kt)("inlineCode",{parentName:"li"},"id")," is the ",(0,o.kt)("inlineCode",{parentName:"li"},"base58btc string")," representation of the ",(0,o.kt)("inlineCode",{parentName:"li"},"Uint8Array (byte array)")," consisting of the ",(0,o.kt)("inlineCode",{parentName:"li"},"the multicodec name")," followed by ",(0,o.kt)("inlineCode",{parentName:"li"},"the public key {raw,uncompressed,compressed}"),".",(0,o.kt)("a",{parentName:"li",href:"#fnref-1",className:"footnote-backref"},"\u21a9")),(0,o.kt)("li",{parentName:"ol",id:"fn-2"},"Compressed keys are the X coordinate of the public key with a prefix that depends on the sign of the Y curve coordinate. The prefix is '02' if even and '03' if odd.",(0,o.kt)("a",{parentName:"li",href:"#fnref-2",className:"footnote-backref"},"\u21a9")),(0,o.kt)("li",{parentName:"ol",id:"fn-3"},"During development there was not yet consensus on using all compressed keys. Support for uncompressed keys with the '04' prefix and\nraw keys (just the x,y bytes with no prefix) was kept for the P-256 and P-384 curves.",(0,o.kt)("a",{parentName:"li",href:"#fnref-3",className:"footnote-backref"},"\u21a9")))))}p.isMDXComponent=!0}}]);