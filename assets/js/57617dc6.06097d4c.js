"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[318],{4852:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>h});var n=r(9231);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(r),h=o,f=p["".concat(c,".").concat(h)]||p[h]||d[h]||i;return r?n.createElement(f,a(a({ref:t},u),{},{components:r})):n.createElement(f,a({ref:t},u))}));function h(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var l=2;l<i;l++)a[l]=r[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},8966:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var n=r(4011),o=(r(9231),r(4852));const i={},a="Concepts overview",s={unversionedId:"guides/concepts-overview",id:"guides/concepts-overview",title:"Concepts overview",description:"Ceramic uses the Decentralized Identifier (DID) standard for users accounts. DIDs require no central authority - users control their data and whom they share it with.",source:"@site/docs/guides/concepts-overview.md",sourceDirName:"guides",slug:"/guides/concepts-overview",permalink:"/docs/guides/concepts-overview",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Configuration",permalink:"/docs/configuration"},next:{title:"Using With ComposeDB Client",permalink:"/docs/guides/using-with-composedb-client"}},c={},l=[{value:"DID Methods",id:"did-methods",level:2},{value:"DID Sessions",id:"did-sessions",level:2}],u={toc:l};function d(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"concepts-overview"},"Concepts overview"),(0,o.kt)("p",null,"Ceramic uses the ",(0,o.kt)("a",{parentName:"p",href:"https://w3c.github.io/did-core/"},"Decentralized Identifier (DID)")," standard for users accounts. DIDs require no central authority - users control their data and whom they share it with."),(0,o.kt)("h2",{id:"did-methods"},"DID Methods"),(0,o.kt)("p",null,"We encourage using the ",(0,o.kt)("inlineCode",{parentName:"p"},"did:pkh")," DID method which generates a persistent id from a wallet address\u2019s public key hash. This enables one-click sign-on with your wallet to many apps on Ethereum, and soon on many other chains including Solana. We also support the Ceramic-created ",(0,o.kt)("a",{parentName:"p",href:"https://developers.ceramic.network/docs/advanced/standards/accounts/3id-did/"},"3ID")," method which acts as an aggregator for multiple accounts and can handle multiple keys simulatneously."),(0,o.kt)("h2",{id:"did-sessions"},"DID Sessions"),(0,o.kt)("p",null,'DID-Sessions is a library for providing a familiar, "web session"-like experience. Users no longer have to sign every single action they take within an app - during a timebound period of time they can authorize the app developer to act on their behalf. DID-Sessions outputs verifiable, serializable objects that store information about which DIDs authenticated them, what capabilities they are authorized with and for how long.'))}d.isMDXComponent=!0}}]);